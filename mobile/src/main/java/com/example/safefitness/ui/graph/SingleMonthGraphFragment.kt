package com.example.safefitness.ui.graph

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.lifecycle.lifecycleScope
import com.example.safefitness.R
import com.example.safefitness.data.FitnessDatabase
import com.example.safefitness.utils.GraphDataProcessor
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import lecho.lib.hellocharts.listener.ColumnChartOnValueSelectListener
import lecho.lib.hellocharts.model.*
import lecho.lib.hellocharts.view.ColumnChartView

class SingleMonthGraphFragment : Fragment() {

    private lateinit var graphView: ColumnChartView
    private lateinit var summaryText: TextView
    private lateinit var dateRangeText: TextView
    private lateinit var dataProcessor: GraphDataProcessor
    private var startDate: String = ""
    private var endDate: String = ""
    private var dataType: String = "steps"

    private val dayLabels = mutableListOf<String>()

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        val view = inflater.inflate(R.layout.fragment_single_month_graph, container, false)

        graphView = view.findViewById(R.id.columnChartView)
        summaryText = view.findViewById(R.id.monthGraphSummaryText)
        dateRangeText = view.findViewById(R.id.monthGraphDateRangeText)

        val database = FitnessDatabase.getDatabase(requireContext())
        dataProcessor = GraphDataProcessor(database.fitnessDao())

        startDate = arguments?.getString("startDate") ?: ""
        endDate = arguments?.getString("endDate") ?: ""
        dataType = arguments?.getString("dataType") ?: "steps"

        loadMonthData()
        return view
    }

    private fun loadMonthData() {
        viewLifecycleOwner.lifecycleScope.launch {
            val monthData = withContext(Dispatchers.IO) {
                dataProcessor.getMonthlyDataForRange(startDate, endDate, dataType)
            }
            dayLabels.clear()
            dayLabels.addAll(monthData.xLabels)
            summaryText.text = monthData.summaryText
            dateRangeText.text = monthData.dateRange
            updateGraph(monthData.aggregatedData)
        }
    }

    private fun updateGraph(data: List<Any>) {
        dayLabels.clear()
        var maxYValue = 0f

        val axisValues = mutableListOf<AxisValue>()

        if (dataType == "steps") {
            val columns = data.mapIndexed { index, item ->
                val steps = item as Pair<String, Number>
                dayLabels.add(steps.first)
                val value = steps.second.toFloat()
                if (value > maxYValue) maxYValue = value
                val subcolumn = SubcolumnValue(value, resources.getColor(android.R.color.holo_blue_light, null))
                axisValues.add(AxisValue(index.toFloat()).setLabel(steps.first))
                Column(listOf(subcolumn)).apply { setHasLabels(true) }
            }

            val columnChartData = ColumnChartData(columns).apply {
                axisXBottom = Axis(axisValues).apply {
                    name = "Day"
                    textSize = 12
                    isAutoGenerated = false
                    setMaxLabelChars(4)
                }
                axisYLeft = Axis().apply {
                    name = "Steps"
                    textSize = 12
                }
            }

            graphView.columnChartData = columnChartData
        } else if (dataType == "heartRate") {
            val columns = data.mapIndexed { index, item ->
                val pulseData = item as GraphDataProcessor.DayPulseData
                dayLabels.add(pulseData.label)
                if (pulseData.maxPulse > maxYValue) maxYValue = pulseData.maxPulse
                val minPulseValue = SubcolumnValue(pulseData.minPulse, resources.getColor(android.R.color.holo_blue_dark, null))
                val maxPulseValue = SubcolumnValue(pulseData.maxPulse, resources.getColor(android.R.color.holo_red_light, null))
                axisValues.add(AxisValue(index.toFloat()).setLabel(pulseData.label))
                Column(listOf(minPulseValue, maxPulseValue)).apply { setHasLabels(true) }
            }

            val columnChartData = ColumnChartData(columns).apply {
                axisXBottom = Axis(axisValues).apply {
                    name = "Day"
                    textSize = 12
                    isAutoGenerated = false
                    setMaxLabelChars(4)
                }
                axisYLeft = Axis().apply {
                    name = "BPM"
                    textSize = 12
                }
            }

            graphView.columnChartData = columnChartData
        }

        val viewport = Viewport(graphView.maximumViewport).apply {
            top = maxYValue * 1.1f
        }
        graphView.maximumViewport = viewport
        graphView.currentViewport = viewport

        graphView.isZoomEnabled = true
        graphView.isInteractive = true

        graphView.setViewportChangeListener {
            val visibleColumns = graphView.currentViewport.width().toInt()
            val labelInterval = if (visibleColumns < axisValues.size / 2) 1 else 2
            val updatedAxisValues = axisValues.filterIndexed { index, _ -> index % labelInterval == 0 }
            graphView.columnChartData.axisXBottom.values = updatedAxisValues
        }

        setGraphClickListener()
    }



    private fun setGraphClickListener() {
        graphView.onValueTouchListener = object : ColumnChartOnValueSelectListener {
            override fun onValueSelected(columnIndex: Int, subcolumnIndex: Int, value: SubcolumnValue?) {
                if (columnIndex in dayLabels.indices) {
                    val selectedDate = dayLabels[columnIndex]
                    Toast.makeText(requireContext(), "Date: $selectedDate", Toast.LENGTH_SHORT).show()
                }
            }

            override fun onValueDeselected() {
            }
        }
    }

    companion object {
        fun newInstance(startDate: String, endDate: String, dataType: String): SingleMonthGraphFragment {
            return SingleMonthGraphFragment().apply {
                arguments = Bundle().apply {
                    putString("startDate", startDate)
                    putString("endDate", endDate)
                    putString("dataType", dataType)
                }
            }
        }
    }
}
